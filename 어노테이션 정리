

어노테이션 정리
https://galid1.tistory.com/494
https://velog.io/@gillog/Spring-Annotation-%EC%A0%95%EB%A6%AC

    @SuppressWarnings("deprecation")
        deprecation 무시

    @Configuration 
        스프링 환경 세팅
        bean구성 클래스라고 알림
        클래스 위에는 이것 메서드 위에는 @Bean

    @Bean 또는 @Bean(name="mybean")
        메서드 위에 사용
        Bean 아이디 기본값은 메서드의 카멜케이스 이름
        괄호를 사용해서 이름을 따로 설정할 수 있음
        의존성, 타입 만들때 @Bean끼리 연결되도록 사용할 수 있음

        처리 로직 따로 만들어야함

    @Component 또는 또는 @Component(value="mycomp")
        클래스 위에 사용
        @Bean하고 동작은 같음
        갖다쓸 곳에 @Bean 사용

        context xml 에 세팅하고 처리로직 만들어야함
    

    @EnableWebSecurity
        스프링 시큐리티 설정클래스라고 알림
        classpath 내용 기반 자동매칭
        tomcat-embed-core.jar가 있다면 톰캣서버가 세팅됨
    
    @Autowired
        https://devlog-wjdrbs96.tistory.com/166
        빈 찾아서 타입으로 주입
        생성자, setter, 필드에 사용가능
        보통 DAO, Service 객체 주입할때 사용

    @Inject
        @Autowired 와 비슷한 역할

    @Controller
        스프링 MVC 에서 컨트롤러 클래스

    @RestController
        view 응답이 아닌 컨트롤러에 사용 JSON 응답 등

    @Service
        비즈니스 로직 수행 클래스

    @Repository
        DAO에 사용됨
        DB접근 하는 클래스에서 쓰임

    @Required
        setter 메서드에 적용하면 bean 생성시 필수라고 알림
        xml설정파일에 property 반드시 있어야함

    @Qualifier("id")
        @Autowired와 같이 쓰이고 
        같은 종류의 Bean이 있을때 
        특정 Bean이 주입될 수 있도록 함

    @Resource
        @Autowired와 같은데 이름으로 연결해줌

    @PostConstruct
    @PreConstruct
        의존객체 생성 후 초기화 작업을 위해 객체 생성 전/후 실행해야할 메서드에 붙임

    @PreDestroy
        객체 제거 전 실행 메서드
        자바는 소멸자가 없나?

    @PropertySource
        프로퍼티 파일을 Env로 로
        클래스 위 @PropertySource("classpath:/settings.properties")
        @Resource 로 프로퍼티에 매핑

    @ConfigurationProperties
        yaml 파일 읽기
        default classpath:application.properties 파일 조회

    @lazy
        지연 로딩
        실제 사용될때 로딩되게

    @Value
        프로퍼티를 가져와서 변수에 할당할때 사용

        public String valueFromFile;
        String file = @Value("${value.from.file}")
        String file = @Value(#{systemProperties['priority'] ?: 'some default'})

    @SpringBootApplication
        @Configuration, @EnableAutoConfiguration, @ComponentScan 하나로 합친 것

    @ComponentScan
        @Component와 @Service, @Repository, @Controller, @Configuration
        붙은 클래스 Bean들을 찾아서 Context에 bean등록을 해주는 Annotation이다.

    @RequestMapping("/uri", method=RequestMethod.GET)
        Route 기능
        컨트롤러에 사용
        HandlerMapping 클래스에 데이터가 모여있다고함

    @CookieValue(value="key")
        쿠키 값을 파라미터로 받을 수 있음
        메서드의 파라미터로 사용

        // 쿠키의 key가 auth에 해당하는 값을 가져옴
        public String view(@CookieValue(value="auth")String auth){...}; 

    @CrossOrigin(origins="http://google.com", maxAge = 3600)
        cors 예외처리해줌
        origin에 있는 도메인만 처리해줌

    @ModelAttribute("ModelClassName")
        view에서 전달해주는 파라미터를 VO/DTO 의 멤버변수로 묶어줌
        태그의 name 값이 class 프로퍼티와 일치해야함

    @GetMapping("/uri"), @PostMapping, @PutMapping, @PatchMapping, @DeleteMapping 
        메서드가 붙은 @RequestMapping 과 같다

    @SessionAttributes("name")
        Session에 데이터 입력시 사용
        Model의 키값이 name인 경우 자동으로 세션에도 저장

    @Valid
        유효성 검증 필요

    @InitBinder
        @Valid 전에 수행할 메서드 지정

    @RequestAttribute
        Request에 설정되어있는 값을 가져온다

    @RequestBody
        요청온 데이터를 바로 Class, Model 로 매핑
        POST, PUT, PATCH로 받을때 자바타입으로 파싱
        메서드의 파라미터에 사용
        public ResponseEntity<?> someMethod(@RequestBody Book book){...}

    @RequestHeader(value="Accept-Language")
        헤더값을 가져온다 메서드의 파라미터에 사용
        
    @RequestParam("key")
        쿼리스트링에서 데이터를 받는다
        메서드의 파라미터에 사용

    @RequestPart("key")
        업로드된 파일을 파라미터로 받는다
        메서드의 파라미터로 사용?

    @ResponseBody
        HttpMessageConverter를 이용해서 JSON, xml로 응답할 수 있게함
        @RestController 가 있다면 쓸 필요 없음

    @PathVariable
        슬러그 값을 받을수 있다
        메서드의 파라미터에 사용
        @RequestMapping(value = "/some/path/{id}", method = RequestMethod.GET)
        public ResponseEntity<?> someMethod(@PathVariable int id) {}

    @ExceptionHandler(예외클래스명.class)
        해당클래스의 예외 캐치

    @ControllerAdvice
        클래스 위에 붙이고 각 메서드에 @ExceptionHandler를 붙인다

    @RestControllerAdvice
        @ControllerAdvice + @ResponseBody
        예외처리, json등 응답

    @ResponseStatus(value=HttpStatus.NOT_FOUND, reason = "some error message")
        response code 와 reason 응답
        예외처리 메서드 앞에 사용

    @EnableEurekaServer
        유레카 서버로 만들어줌
        마이크로 서비스를 운영할때 한다고함

    @EnableDiscoveryClient
        유레카 서버에서 관리될 수 있는 클라이언트라고 알림

    @Transactional(readOnly=true, rollbackFor=Exception.class, noRollbackFor=Exception.class, timeout=10)
        트랜잭션 설정하고 싶은 메서드에 적용
        커밋은 자동적용, Exception 발생시, 타임아웃시 롤백
        대체로 Service 쪽에서 사용

    @Cacheable(value="key")
        메서드 앞에 지정하면 캐싱

    @CachePut
        캐시 업데이트 해줌 @Cacheable과 같이 사용하면 안됨

    @CacheEvict(value="key", allEntries=true)
        캐시 데이터 제거 해줌

    @CacheConfig
        클래스 에서 공통 설정

    @Scheduled(cron = "0 0 7 * * ?")
        스케줄링

    Lombok Annotation 추가 어노테이션 라이브러리
        코드 짧게 만들수있음
        모델 프로퍼티의 getter setter 생략가능

    @NoArgsConstructor(access = AccessLevel.PROTECTED)
        기본생성자 자동추가 protected 붙음

    @AllArgsConstructor
        파라미터 몇개든 받는 생성자 추가

    @RequiredArgsConstructor
        final, @NonNull 파라미터 파라미터를 받는다

    @Getter
        클래스내 모든 프로퍼티의 getter 메서드를 만들어준다

    @Setter
        클래스내 모든 프로퍼티의 setter 메서드를 만들어준다

    @ToString(exclude = "password")
        클래스내 모든 프로퍼티의 toString 메서드를 만들어준다
        exclude는 특정 값 제외
        리턴 형식 classname(prop=val, prop=val)

    @EqualsAndHashCode(callSuper=true)
        equals와 hashCode 메서드를 오버라이딩 해준다
        부모 클래스 적용 여부 설정 가능 false기본값

    @Builder
        어느 프로퍼티에 어떤값을 세팅해야할지 정해서 생성시점에 값을 채워줌
        빌더패턴써야함

    @Data
        Lombok의 모든 어노테이션을 세팅한다
        안쓰는게 좋음

    JPA Annotation
        DB작업시 실제쿼리 안쓰고 Entity 클래스로

    @Entity
        실제 DB테이블과 매칭될 클래스 명시
        @Table 안쓰면 클래스이름을 테이블 이름으로 매핑
            SalesManager.java -> sales_manager

    @Table(name="user")
        Entity 클래스에 매칭할 테이블 정보를 명시
        없다면 클래스 이름을 테이블 이름으로 매핑

    @Id
        해당 테이블의 PK 명시

    @GeneratedValue
        PK 생성규칙 명시

    @Column(name = "username")
        프로퍼티와 컬럼명 매핑
        생략하면 프로퍼티 이름이 컬럼명이됨

